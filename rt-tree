#!/usr/bin/python
"""
"""
import pygtk
pygtk.require('2.0')
import gtk

import os.path
import os
import sys
import subprocess
import copy

def selfsorted(x) :
    "Sort array destructively"
    x.sort()
    return x

def col1_toggled_cb(treeview, path, view_column, self):
    "Handler for clicked object"
    try:
        # Check for children
        self.treestore[path].iterchildren().next()
        # Has children -- expand/collapse then
        if treeview.row_expanded(path) :
            treeview.collapse_row(path)
        else :
            treeview.expand_row(path, False)
    except StopIteration :
        # Terminal node
        fpath = []
        node  = self.treestore[path]
        while node is not None :
            fpath.insert(0, node[0])
            node = node.parent
        # Send command to RT-biplot
        try:
            _,_,mask = treeview.get_bin_window().get_pointer()
            if mask & gtk.gdk.CONTROL_MASK :
                cmd = "add"
            else :
                cmd = "plot"
            # Decide if file a histogram or graph
            fullpath = os.path.join( self.datadir, *fpath )
            if open(fullpath).readline() == "# Histogram\n" :
                self.rt.stdin.write( "%s hist \"%s\"\n"  % (cmd, fullpath ))
            else :
                self.rt.stdin.write( "%s graph \"%s\"\n"  % (cmd, fullpath ))
            self.rt.stdin.write( "set title \"%s\"\n" % os.path.join( *fpath) )
            self.rt.stdin.flush()
        except IOError:
            self.terminate()

def issueCommand(entry, self) :
    "Send command down the pipe"
    cmd = entry.get_chars(0,-1)
    if not entry.history or entry.history[-1] != cmd :
        entry.history.append( cmd )
    self.rt.stdin.write( cmd+"\n" )
    self.rt.stdin.flush()
    entry.delete_text(0,-1)

def historyKey(entry, event, self) :
    name = gtk.gdk.keyval_name( event.keyval )
    l    = len( entry.history )
    if name == "Left" and event.get_state() & gtk.gdk.CONTROL_MASK :
        if entry.history_pos is None :
            entry.history_pos = l - 1
        elif entry.history_pos == 0 :
            return True
        else :
            entry.history_pos = entry.history_pos - 1
        entry.set_text( entry.history[ entry.history_pos ] )
        return True
    if name == "Right" and event.get_state() & gtk.gdk.CONTROL_MASK :
        if entry.history_pos is None :
            return True
        elif entry.history_pos == l - 1 :
            entry.history_pos = None
        else : 
            entry.history_pos = entry.history_pos + 1
            entry.set_text( entry.history[ entry.history_pos ] )            
        return True
    # Reset position if key changed
    if event.keyval < 65535 :
        entry.history_pos = None
    return False

class BasicTreeViewExample:
    # Cleanly terminate application
    def terminate(self) :
        self.rt.terminate()
        gtk.main_quit()

    # close the window and quit
    def delete_event(self, widget, event, data=None):
        self.terminate()
        return False

    # Reread tree
    def reread(self, dummy=None) :
        try:
            self.treestore.clear()
            self.append(self.datadir, None)
        except:
            self.terminate()

    ## Fill in data
    def append(self, fdir, parent ) :
        for f in selfsorted( os.listdir(fdir) ) :
            pIter = self.treestore.append( parent, [f] )
            f = os.path.join(fdir,f)
            if os.path.isdir( f ) :
                self.append( f, pIter )

    def __init__(self, fdir):
        self.datadir = os.path.abspath( fdir )
        # Launch rt-biplot
        self.rt = subprocess.Popen(['rt-plot'], stdin = subprocess.PIPE)
        # Create a new window
        self.window = gtk.Window( gtk.WINDOW_TOPLEVEL)
        self.window.set_title("Histogram list")
        self.window.set_size_request(200, 600)
        self.window.connect("delete_event", self.delete_event)
        
        # create a TreeStore with one string column to use as the model
        self.treestore = gtk.TreeStore(str)
        self.reread()
        # create the TreeView using treestore
        self.treeview = gtk.TreeView(self.treestore)
        self.treeview.connect("row-activated", col1_toggled_cb, self)
                
        # create the TreeViewColumn to display the data
        tvcolumn = gtk.TreeViewColumn('Histogram')
        cell = gtk.CellRendererText()
        tvcolumn.pack_start(cell, True)
        tvcolumn.add_attribute(cell, 'text', 0)
        # make it searchable
        self.treeview.set_search_column(0)
        self.treeview.append_column(tvcolumn)

        # Scrollbar
        swindow = gtk.ScrolledWindow()
        swindow.add(self.treeview)
        # Button
        reread = gtk.Button("Reread tree")
        reread.connect("clicked", self.reread)
        # Commands
        cmd = gtk.Entry()
        cmd.history     = []
        cmd.history_pos = None
        cmd.connect("activate", issueCommand, self)
        cmd.connect("key-release-event", historyKey, self)
        # Layout
        self.vbox = gtk.VBox(False)
        self.vbox.pack_start( swindow )
        self.vbox.pack_start( reread, False )
        self.vbox.pack_start( cmd,    False )
        
        # All done
        self.window.add( self.vbox )
        self.window.show_all()


if len( sys.argv ) != 2 :
    print "rt-tree: directory parameter isn't given"
    sys.exit()
tvexample = BasicTreeViewExample(sys.argv[1])
gtk.main()
